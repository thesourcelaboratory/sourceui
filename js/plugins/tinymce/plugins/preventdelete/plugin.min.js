tinymce.PluginManager.add('preventdelete', function(editor, link) {
	var between = function(val, min, max) {
		return val >= min && val <= max
	}
	var keyWillDelete = function(event){
		var c = event.keyCode
		//ctrl+x or ctrl+back/del will all delete, but otherwise it probably won't
		if (event.ctrlKey) return event.key == 'x' || [8,46].indexOf(c) > -1;
		return [8,9,13,46].indexOf(c) > -1 || between(c,48,57) || between(c,65,90) || between(c,96,111) || between(c,186,192) || between(c,219,222);
	}

	var yedt = editor.settings.noneditable_editable_class;
	var nedt = editor.settings.noneditable_noneditable_class;

	var nodelete = [];
	if (yedt) nodelete.push('.'+yedt);
	if (nedt) nodelete.push('.'+nedt);
	var nodelclass = nodelete.join(', ');

	editor.on('keydown', function(event) {

		var $body = $(editor.bodyElement);
		var testPrevent = $body.find(nodelclass).length > 0;

		if (!testPrevent) return true;

		var range = editor.selection.getRng();
		console.log(range);

		var $startContainer = $(range.startContainer);
		var $endContainer = $(range.endContainer);
		var $commonAncestorContainer = $(range.commonAncestorContainer);

		var willdel = keyWillDelete(event);

		if (nedt && willdel && ($startContainer.is('.'+nedt) || $endContainer.is('.'+nedt) || $commonAncestorContainer.is('.'+nedt))){
			event.preventDefault(); console.log('PREVENT'); return false;
		}
		if (yedt && ($startContainer.closest('.'+yedt).length || $endContainer.closest('.'+yedt).length)){
			if ([8,46].indexOf(event.keyCode) > -1 && (($startContainer.text() === '' && !$startContainer.find('img,video,div').length) || ($endContainer.text() === '' && !$endContainer.find('img,video,div').length))){
				event.preventDefault(); console.log('PREVENT'); return false;
			}
		}
		if (range.commonAncestorContainer.nodeType === 3 && range.commonAncestorContainer === range.startContainer && range.commonAncestorContainer === range.endContainer){ // If range is inside a single text element
			if (event.keyCode === 8 && range.startOffset === 0 && range.endOffset === 0 && $(range.startContainer.previousSibling).is(nodelclass)){
				event.preventDefault(); console.log('PREVENT'); return false;
			} else if (event.keyCode === 46 && range.startOffset === range.endOffset && range.endOffset === range.endContainer.length && $(range.startContainer.nextSibling).is(nodelclass)){
				event.preventDefault(); console.log('PREVENT'); return false;
			}
		}
		if (willdel && range.commonAncestorContainer.nodeType !== 3 && range.commonAncestorContainer === range.startContainer){
			if ($commonAncestorContainer.find(nodelclass).length){
				event.preventDefault(); console.log('PREVENT'); return false;
			}
		}
		if (willdel && ($startContainer.is('.mce-content-body') || $endContainer.is('.mce-content-body'))){
			if ($startContainer.find(nodelclass).length || $endContainer.find(nodelclass).length){
				event.preventDefault(); console.log('PREVENT'); return false;
			}
		}
	});
});
